[
  {
    "id": "ai_test.py#func_6",
    "file": "test_folder/ai_test.py",
    "line": 5,
    "tag": "logic",
    "issue": "Function does not return a value",
    "code": "def no_return_add(a, b):\n    c = a + b",
    "status": "unresolved",
    "comments": [],
    "short_id": "0000"
  },
  {
    "id": "ai_test.py#func_10",
    "file": "test_folder/ai_test.py",
    "line": 9,
    "tag": "logic",
    "issue": "Function ignores input and always returns 42",
    "code": "def constant_result(input):\n    return 42",
    "status": "unresolved",
    "comments": [],
    "short_id": "0001"
  },
  {
    "id": "ai_test.py#func_17",
    "file": "test_folder/ai_test.py",
    "line": 16,
    "tag": "logic",
    "issue": "Infinite recursion with no base case",
    "code": "def recursive_bomb(n):\n    return recursive_bomb(n + 1)",
    "status": "unresolved",
    "comments": [],
    "short_id": "0002"
  },
  {
    "id": "ai_test.py#func_21",
    "file": "test_folder/ai_test.py",
    "line": 20,
    "tag": "logic",
    "issue": "Division by zero",
    "code": "def divide_by_zero():\n    return 1 / 0",
    "status": "unresolved",
    "comments": [],
    "short_id": "0003"
  },
  {
    "id": "ai_test.py#func_25",
    "file": "test_folder/ai_test.py",
    "line": 24,
    "tag": "perf",
    "issue": "Inefficient use of sum in a loop",
    "code": "def repeated_sum(n):\n    total = 0\n    for i in range(n):\n        total += sum(range(n))\n    return total",
    "status": "unresolved",
    "comments": [],
    "short_id": "0004"
  },
  {
    "id": "ai_test.py#func_34",
    "file": "test_folder/ai_test.py",
    "line": 33,
    "tag": "arch",
    "issue": "Global variable used",
    "code": "def increment_global():\n    global count\n    count += 1\n    return count",
    "status": "unresolved",
    "comments": [],
    "short_id": "0005"
  },
  {
    "id": "ai_test.py#func_40",
    "file": "test_folder/ai_test.py",
    "line": 39,
    "tag": "style",
    "issue": "Unnecessary nested if statements",
    "code": "def check_even(n):\n    if n % 2 == 0:\n        if True:\n            if not False:\n                return True\n    return False",
    "status": "unresolved",
    "comments": [],
    "short_id": "0006"
  },
  {
    "id": "ai_test.py#func_48",
    "file": "test_folder/ai_test.py",
    "line": 47,
    "tag": "style",
    "issue": "Variable shadowing",
    "code": "def shadow_example(val):\n    val = 10\n    def inner():\n        val = 20\n        return val\n    return inner()",
    "status": "unresolved",
    "comments": [],
    "short_id": "0007"
  },
  {
    "id": "ai_test.py#func_56",
    "file": "test_folder/ai_test.py",
    "line": 55,
    "tag": "style",
    "issue": "Unused variable in the code",
    "code": "def stuff(a):\n    unused = 12345\n    asdf = a * a\n    return asdf",
    "status": "unresolved",
    "comments": [],
    "short_id": "0008"
  },
  {
    "id": "test_scenario.py#func_4",
    "file": "test_folder/test_scenario.py",
    "line": 3,
    "tag": "logic",
    "issue": "No handling for division by zero.",
    "code": "def divide(a, b):\n    return a / b",
    "status": "unresolved",
    "comments": [],
    "short_id": "0009"
  },
  {
    "id": "test_scenario.py#func_8",
    "file": "test_folder/test_scenario.py",
    "line": 7,
    "tag": "logic",
    "issue": "The range in the for loop should be 'range(n+1)' instead of 'range(n)'.",
    "code": "def add_numbers(n):\n    total = 0\n    for i in range(n):  # should be range(n+1)\n        total += i\n    return total",
    "status": "unresolved",
    "comments": [],
    "short_id": "000A"
  },
  {
    "id": "test_scenario.py#func_15",
    "file": "test_folder/test_scenario.py",
    "line": 14,
    "tag": "arch",
    "issue": "Database connection established within the function",
    "code": "def update_user_profile(user_id, new_data):\n    # update database (side-effect)\n    db = connect_to_db()\n    db.update(user_id, new_data)\n\n    # compute analytics (pure)\n    summary = {\n        'length': len(new_data),\n        'uppercase_fields': [k for k in new_data if k.upper() == k]\n    }\n    return summary",
    "status": "unresolved",
    "comments": [],
    "short_id": "000B"
  },
  {
    "id": "test_scenario.py#func_29",
    "file": "test_folder/test_scenario.py",
    "line": 28,
    "tag": "perf",
    "issue": "The bubble sort algorithm can be optimized.",
    "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
    "status": "unresolved",
    "comments": [],
    "short_id": "000C"
  },
  {
    "id": "test_scenario.py#func_38",
    "file": "test_folder/test_scenario.py",
    "line": 37,
    "tag": "logic",
    "issue": "Undefined function 'merge'",
    "code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)",
    "status": "unresolved",
    "comments": [],
    "short_id": "000D"
  },
  {
    "id": "test_scenario.py#func_47",
    "file": "test_folder/test_scenario.py",
    "line": 46,
    "tag": "logic",
    "issue": "Incomplete merge function",
    "code": "def merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result",
    "status": "unresolved",
    "comments": [],
    "short_id": "000E"
  },
  {
    "id": "test_scenario.py#func_62",
    "file": "test_folder/test_scenario.py",
    "line": 61,
    "tag": "logic",
    "issue": "Red-Black Tree logic is missing",
    "code": "def red_black_tree_sort(arr):\n    class Node:\n        def __init__(self, key):\n            self.key = key\n            self.left = None\n            self.right = None\n            self.color = 'red'  # just a placeholder for actual color logic\n\n    def insert(root, node):\n        if root is None:\n            return node\n        if node.key < root.key:\n            root.left = insert(root.left, node)\n        else:\n            root.right = insert(root.right, node)\n        return root\n\n    def inorder(root):\n        if root is None:\n            return []\n        return inorder(root.left) + [root.key] + inorder(root.right)\n\n    root = None\n    for value in arr:\n        root = insert(root, Node(value))\n    return inorder(root)",
    "status": "unresolved",
    "comments": [],
    "short_id": "000F"
  }
]